snippet widget:init
/**
 * Copyright 2016, jackness.org
 * Creator: Jackness Lau
 * $Author: Jackness Lau $
 * $Date: 2016.01.01 $
 * $Version: 1.0.0 $
 */

(function( global, factory ){
    if ( typeof module === "object" && typeof module.exports === "object" ) {
	
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "demoWidget requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

})(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

var document = window.document;


var fn = {
    
    /**
     * 判断对象类别
     * @param {Anything} 对象
     * @return {string}  类型
     */
    type: function (obj) {
        var type,
            toString = Object.prototype.toString;
        if (obj == null) {
            type = String(obj);
        } else {
            type = toString.call(obj).toLowerCase();
            type = type.substring(8, type.length - 1);
        }
        return type;
    },

    isPlainObject: function (obj) {
        var she = this,
            key,
            hasOwn = Object.prototype.hasOwnProperty;

        if (!obj || she.type(obj) !== 'object') {
            return false;
        }

        if (obj.constructor &&
            !hasOwn.call(obj, 'constructor') &&
            !hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
            return false;
        }

        for (key in obj) {}
        return key === undefined || hasOwn.call(obj, key);
    },

    /**
     * 扩展方法(来自 jQuery)
     * extend([deep,] target, obj1 [, objN])
     * @base she.isPlainObject
     */
    extend: function () {
        var she = this,
            options, name, src, copy, copyIsArray, clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        // Handle a deep copy situation
        if (typeof target === 'boolean') {
            deep = target;
            target = arguments[1] || {};
            // skip the boolean and the target
            i = 2;
        }

        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== 'object' && she.type(target) !== 'function') {
            target = {};
        }

        // extend caller itself if only one argument is passed
        if (length === i) {
            target = this;
            --i;
        }

        for (; i<length; i++) {
            // Only deal with non-null/undefined values
            if ((options = arguments[i]) != null) {
                // Extend the base object
                for (name in options) {
                    src = target[name];
                    copy = options[name];

                    // Prevent never-ending loop
                    if (target === copy) {
                        continue;
                    }

                    // Recurse if we're merging plain objects or arrays
                    if (deep && copy && (she.isPlainObject(copy) || (copyIsArray = she.type(copy) === 'array'))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && she.type(src) === 'array' ? src : [];
                        } else {
                            clone = src && she.isPlainObject(src) ? src : {};
                        }

                        // Never move original objects, clone them
                        target[name] = she.extend(deep, clone, copy);

                    // Don't bring in undefined values
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }

        // Return the modified object
        return target;
    }
};
$0
// + config
var 
    options = {
        
    };
// - config
// + protected attributes
var 
    attributes = {
        
    };
// + protected attributes

var demoWidget = function(target, op){
    return new demoWidget.fn.init(target, op);
};

// + protected fn
demoWidget.fn = demoWidget.prototype = {

};
// - protected fn

// + demoWidgetinit
var init = demoWidget.fn.init = function(target, op){
    var 
        she = this,
        o = she.options = fn.extend({}, options, op);

    fn.extend(she, attributes);

    
    return she;
};

init.prototype = demoWidget.fn;
// - init


if ( typeof define === "function" && define.amd ) {
	define([], function() {
		return demoWidget;
	});
}

if ( typeof noGlobal === 'undefined' ) {
	window.demoWidget = demoWidget;
}

});

endsnippet
snippet gulpfile:init
'use strict';
var
    gulp = require('gulp'),
    sass = require('gulp-sass');

gulp.task('default', function(){
    console.log([
        '',
        '',
        '  Ustage:' + ' gulp <command>',
        '',
        '',
        '  Commands:',
        '    all                init project',
        '    css                run css task',
        '    watch              run watch',
        ''
    ].join('\n'));
});

gulp.task('all', ['css'], function(){

});

gulp.task('css', function(){
    gulp.src('./sass/**/*.scss')
        .pipe(sass({outputStyle: 'nested'}).on('error', sass.logError))
        .pipe(gulp.dest('./css'));

});

gulp.task('watch', ['all'], function(){
    gulp.watch('./**/*.scss', ['css']);
});
endsnippet
