" Maintainer:   jackness Lau
" Last Change:  2019.03.09

" 自动补全工具选择
let AUTO_COMPLETE = 'neocomplete'
" let AUTO_COMPLETE = 'ycm'

" tab 4|2 设置
let TAB_WIDTH = 4
" let TAB_WIDTH = 2



let SYSTEM = 'others'
if has('win32') || has('win64')
  let SYSTEM = 'windows'
endif


if SYSTEM == 'windows'
    let vimFilePath = $VIM. '/vimfiles'
else 
    let vimFilePath = $HOME. '/.vim/vimfiles'
endif


" windows 预处理函数
function MyDiff()
    let opt = '-a --binary '
    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    if $VIMRUNTIME =~ ' '
        if &sh =~ '\<cmd'
            if empty(&shellxquote)
                let l:shxq_sav = ''
                set shellxquote&
            endif
            let cmd = '"' . $VIMRUNTIME . '\diff"'
        else
            let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
        endif
    else
        let cmd = $VIMRUNTIME . '\diff'
    endif
    silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
    if exists('l:shxq_sav')
        let &shellxquote=l:shxq_sav
    endif
endfunction


" ======================================================
" 预处理
" ======================================================
if SYSTEM == 'windows'
    set nocompatible
    " source $VIMRUNTIME/vimrc_example.vim
    source $VIMRUNTIME/mswin.vim

    behave mswin
    set diffexpr=MyDiff()

endif


" # 系统设置
" ======================================================

" 插入模式下用绝对行号, 普通模式下用相对
" autocmd InsertEnter * :set norelativenumber number
" autocmd InsertLeave * :set relativenumber

" 禁止自动换行
set tw=0

set lazyredraw
set ttyfast

" 禁止警告音
if SYSTEM != 'windows'
set vb
endif

" 优化标签页
set guitablabel=%t
" 自动设置当前编辑的文件为工作路径
set autochdir
set showcmd

set nocompatible
" The default for 'backspace' is very confusing to new users, so change it to a
" more sensible value.  Add "set backspace&" to your ~/.vimrc to reset it.
set backspace+=indent,eol,start

" Disable localized menus for now since only some items are translated (e.g.
" the entire MacVim menu is set up in a nib file which currently only is
" translated to English).
set langmenu=none


" # 设置编码格式
if has("multi_byte")
    " A,set encoding
    set encoding=utf-8
    set nobomb
    set fileencodings=ucs-bom,utf-8,cp936,chinese,cp932,gb2312,gbk,gb18030
    set tenc=utf-8
    set maxcombine=4
    set termencoding=utf-8
    " open asia support
    set fo+=mBM
    if v:lang=~? '^\(zh\)\|\(ja\)|\(ko\)\|\(jp\)'
        set ambiwidth=double
    endif

    if SYSTEM == 'windows'
        set fenc=chinese
        if version>=603
            set helplang=cn
        endif
    else
        set fenc=utf-8
    endif

    let &termencoding=&encoding

    " B,vim tips support
    language messages zh_CN.utf-8
    "关闭自动检测
    let g:fencview_autodetect=0
endif
set langmenu=zh_CN.UTF-8
language message zh_CN.UTF-8
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim



" 显示tab和空格
set list
set endofline
" 设置tab和空格样式
set list listchars=tab:>-
set lcs=tab:\|\ ,nbsp:%,trail:-
" 设定行首tab为灰色
"highlight LeaderTab guifg=#666666
" 匹配行首tab
"match LeaderTab /^\t/


" 不生成 ~ 文件
set noswapfile
set nobackup
set noundofile


" 配色方案
syntax enable

" 配置折叠
set foldmethod=marker
set foldmarker=/{,/}
" 启动 vim 时关闭折叠代码
set nofoldenable

 "高亮光标所在行
set cul
set cuc

" 显示行号
set number

" 自动缩进
set noai
set autoindent

" Tab键的宽度
let &tabstop=TAB_WIDTH
let &softtabstop=TAB_WIDTH
let &shiftwidth=TAB_WIDTH


" 不要用空格代替制表符
set expandtab

" 在行和段开始处使用制表符
set smarttab

" 历史记录数
set history=1000

"搜索逐字符高亮
set hlsearch
set incsearch

" 搜索时大小写不敏感
set ignorecase

"自动保存
set autowrite

"共享剪贴板  
"set clipboard+=unnamed 

" 不要使用vi的键盘模式，而是vim自己的
set nocompatible
" 去掉输入错误的提示声音
set noeb
" 在处理未保存或只读文件的时候，弹出确认
"set confirm

" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
set mouse=a
" 这样设置才能确保 mutiselect 插件能用
set selection=inclusive
" 通过使用: commands命令，告诉我们文件的哪一行被改变过
set report=0
" 在被分割的窗口间显示空白，便于阅读
set fillchars=vert:\ ,stl:\ ,stlnc:\
" 高亮显示匹配的括号
set showmatch
" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=20
" 光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=1
" 侦测文件类型
filetype on
" 载入文件类型插件
filetype plugin on
" 为特定文件类型载入相关缩进文件
filetype indent on
" 保存全局变量
set viminfo+=!
" 带有如下符号的单词不要被换行分割
set iskeyword+=_,$,@,%,#,-

"======================================================
" 快捷键设置
"======================================================

" 定义快捷键的前缀，即<Leader>
let mapleader=";"
"set notimeout
"set ttimeout


" "# 代码缩进 -----------------------
vmap <Tab> >gv
vmap <S-Tab> <gv
nmap <Tab> >>
nmap <S-Tab> <<

"# tab 操作 -----------------------
map <A-Tab> <Esc> :tabn<CR>
if SYSTEM == "windows" 
    nmap <C-t> :tabnew<CR>
else
    nmap <D-t> :tabnew<CR>
endif
"map <D-f> <Esc> :/

"# tab 操作 -----------------------

" 普通模式换行---------------------
nmap <CR> i<CR><Esc>
nmap <BS> i<BS><Esc>

" 插入模式 黏贴 yank 内容
if SYSTEM == 'windows' 
    imap <C-p> <C-r>0
else
    imap <D-p> <C-r>0
endif
" 定义快捷键到行首和行尾
map <Leader>b ^
map <Leader>e $
vmap <Leader>e $h

" tab 2 tab 4 模式切换
map t2 :set tabstop=2<CR>:set softtabstop=2<CR>:set shiftwidth=2<CR>:e<CR>
map t4 :set tabstop=4<CR>:set softtabstop=4<CR>:set shiftwidth=4<CR>:e<CR>

" 设置快捷键将选中文本块复制至系统剪贴板
vnoremap <Leader>y "+y
"" 设置快捷键将选中文本块剪切至系统剪贴板
vnoremap <Leader>d "+d
" 设置快捷键将系统剪贴板内容粘贴至 vim
nmap <Leader>p "+p
" 定义快捷键关闭当前分割窗口
nmap <Leader>q :q<CR>
" 定义快捷键保存当前窗口内容
nmap <Leader>w :w<CR>
" 定义快捷键保存所有窗口内容并退出 vim
nmap <Leader>WQ :wa<CR>:q<CR>
" 不做任何保存，直接退出 vim
nnoremap <Leader>Q :qa!<CR>
" 依次遍历tab
nnoremap tn :tabn<CR>
" 依次遍历tab
nnoremap tp :tabp<CR>
" 依次遍历 buffer
nnoremap bn :bnext<CR>
" 依次遍历 buffer
nnoremap bp :bprev<CR>

" 依次遍历子窗口
nnoremap wn <C-W><C-W>
" 前一个子窗口
nnoremap wp <C-W>p
" 跳转至右方的窗口
nnoremap wl <C-W>l
" 跳转至左方的窗口
nnoremap wh <C-W>h
" 跳转至上方的子窗口
nnoremap wk <C-W>k
" 跳转至下方的子窗口
nnoremap wj <C-W>j
" 上下分割当前文件
nmap ws <C-w>s
nmap w2 <C-w>s
" 左右分割当前文件
nmap wv <C-w>v

map <Leader>rn :set relativenumber<CR>
map <Leader>nn :set norelativenumber<CR>

" tab 转换成 4个空格
map <Leader>ts :set expandtab<CR>:%ret! 4<CR>

" 定义快捷键在结对符之间跳转，助记pair
" nmap <Leader>pa %

" 删除到行未
nmap <Leader>de d$
" 删除到行头
nmap <Leader>db d0

" 删除 ^m
nmap cm :%s/\r//g<CR>

" 括号匹配
map <Leader>a %

" toggle syntax
map <Leader>s :exec exists('syntax_on') ? 'syn off': 'syn on'<CR>


" 打开文件
if SYSTEM == 'windows'
    nmap <Leader>o :! explorer /select,  %:p<CR><CR>
else
    nmap <Leader>o :! open %:p:h<CR><CR>
endif

" 注释
map zz v<Leader>b<Leader>e%zf

" 选中区域加双引号
" function arround(dot)
"     let a:iTxt = getreg('0')
"     let a:r = a:dot . a:iTxt . a:dot
"     pu = a:r
" endfunction
" vmap " d:call arround('"')<CR>

vmap " di"<Esc>p
vmap ' di'<Esc>p
vmap ( di(<Esc>p
vmap [ di[<Esc>p
vmap { di{<Esc>p

" 搜索选中的内容
vmap / y/<c-r>0<CR>

" 马上让vim配置文件生效
if SYSTEM == 'windows'
    map <Leader>rv :source $VIM/_vimrc<CR><CR>
else
    map <Leader>rv :source $VIM/vimrc<CR><CR>
endif
