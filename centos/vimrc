" tab 4|2 设置
let TAB_WIDTH = 4



if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
   set fileencodings=ucs-bom,utf-8,latin1
endif

set nocompatible        " Use Vim defaults (much better!)
set bs=indent,eol,start         " allow backspacing over everything in insert mode
"set ai                 " always set autoindenting on
"set backup             " keep a backup file
set viminfo='20,\"50    " read/write a .viminfo file, don't store more
                        " than 50 lines of registers
set history=1000        " keep 50 lines of command line history
set ruler               " show the cursor position all the time

" Only do this part when compiled with support for autocommands
if has("autocmd")
  augroup redhat
  autocmd!
  " In text files, always limit the width of text to 78 characters
  " autocmd BufRead *.txt set tw=78
  " When editing a file, always jump to the last cursor position
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif
  " don't write swapfile on most commonly used directories for NFS mounts or USB sticks
  autocmd BufNewFile,BufReadPre /media/*,/run/media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp
  " start with spec file template
  autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec
  augroup END
endif

if has("cscope") && filereadable("/usr/bin/cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add $PWD/cscope.out
   " else add database pointed to by environment
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   endif
   set csverb
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
  set incsearch
endif

filetype plugin on

if &term=="xterm"
     set t_Co=8
     set t_Sb=^[[4%dm
     set t_Sf=^[[3%dm
endif

" Don't wake up system with blinking cursor:
" http://www.linuxpowertop.org/known.php
let &guicursor = &guicursor . ",a:blinkon0"

" 显示tab和空格
set list
set endofline
" 设置tab和空格样式
set list listchars=tab:>-
set lcs=tab:\|\ ,nbsp:%,trail:-
" 设定行首tab为灰色
"highlight LeaderTab guifg=#666666
" 匹配行首tab
"match LeaderTab /^\t/

" 配置折叠
"set foldmethod=manual
" set foldmethod=indent
" set foldmethod=syntax
set foldmethod=marker
set foldmarker=/{,/}
" 启动 vim 时关闭折叠代码
set nofoldenable

"高亮光标所在行
" set cul
" set cuc

" 自动缩进
" set autoindent
" set smartindent
set noai
set autoindent

" Tab键的宽度
let &tabstop=TAB_WIDTH
let &softtabstop=TAB_WIDTH
let &shiftwidth=TAB_WIDTH

" 不要用空格代替制表符
set expandtab

" 在行和段开始处使用制表符
set smarttab

" 搜索时大小写不敏感
set ignorecase

"自动保存
set autowrite

" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
set mouse=a
" 这样设置才能确保 mutiselect 插件能用
set selection=inclusive
" 通过使用: commands命令，告诉我们文件的哪一行被改变过
set report=0
" 在被分割的窗口间显示空白，便于阅读
set fillchars=vert:\ ,stl:\ ,stlnc:\
" 高亮显示匹配的括号
set showmatch
" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=20
" 光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=1
" 侦测文件类型
filetype on
" 载入文件类型插件
filetype plugin on
" 为特定文件类型载入相关缩进文件
filetype indent on
" 保存全局变量
set viminfo+=!
" 带有如下符号的单词不要被换行分割
set iskeyword+=_,$,@,%,#,-

"======================================================
" 快捷键设置
"======================================================

" 定义快捷键的前缀，即<Leader>
let mapleader=";"
"set notimeout
"set ttimeout


" "# 代码缩进 -----------------------
vmap <Tab> >gv
vmap <S-Tab> <gv
nmap <Tab> >>
nmap <S-Tab> <<

"# tab 操作 -----------------------
map <A-Tab> <Esc> :tabn<CR>
if SYSTEM == "windows" 
    nmap <C-t> :tabnew<CR>
else
    nmap <D-t> :tabnew<CR>
endif
"map <D-f> <Esc> :/

"# tab 操作 -----------------------

" 普通模式换行---------------------
nmap <CR> i<CR><Esc>
nmap <BS> i<BS><Esc>

" 插入模式 黏贴 yank 内容
if SYSTEM == 'windows' 
    imap <C-p> <C-r>0
else
    imap <D-p> <C-r>0
endif
" 定义快捷键到行首和行尾
map <Leader>b ^
map <Leader>e $
vmap <Leader>e $h

" tab 2 tab 4 模式切换
map t2 :set tabstop=2<CR>:set softtabstop=2<CR>:set shiftwidth=2<CR>:e<CR>
map t4 :set tabstop=4<CR>:set softtabstop=4<CR>:set shiftwidth=4<CR>:e<CR>

" 设置快捷键将选中文本块复制至系统剪贴板
vnoremap <Leader>y "+y
"" 设置快捷键将选中文本块剪切至系统剪贴板
vnoremap <Leader>d "+d
" 设置快捷键将系统剪贴板内容粘贴至 vim
nmap <Leader>p "+p
" 定义快捷键关闭当前分割窗口
nmap <Leader>q :q<CR>
" 定义快捷键保存当前窗口内容
nmap <Leader>w :w<CR>
" 定义快捷键保存所有窗口内容并退出 vim
nmap <Leader>WQ :wa<CR>:q<CR>
" 不做任何保存，直接退出 vim
nnoremap <Leader>Q :qa!<CR>
" 依次遍历tab
nnoremap tn :tabn<CR>
" 依次遍历tab
nnoremap tp :tabp<CR>
" 依次遍历 buffer
nnoremap bn :bnext<CR>
" 依次遍历 buffer
nnoremap bp :bprev<CR>

" 依次遍历子窗口
nnoremap wn <C-W><C-W>
" 前一个子窗口
nnoremap wp <C-W>p
" 跳转至右方的窗口
nnoremap wl <C-W>l
" 跳转至左方的窗口
nnoremap wh <C-W>h
" 跳转至上方的子窗口
nnoremap wk <C-W>k
" 跳转至下方的子窗口
nnoremap wj <C-W>j
" 上下分割当前文件
nmap ws <C-w>s
nmap w2 <C-w>s
" 左右分割当前文件
nmap wv <C-w>v

map <Leader>rn :set relativenumber<CR>
map <Leader>nn :set norelativenumber<CR>

" tab 转换成 4个空格
map <Leader>ts :set expandtab<CR>:%ret! 4<CR>

" 定义快捷键在结对符之间跳转，助记pair
" nmap <Leader>pa %

" 删除到行未
nmap <Leader>de d$
" 删除到行头
nmap <Leader>db d0

" 删除 ^m
nmap cm :%s/\r//g<CR>

" 括号匹配
map <Leader>a %

" toggle syntax
map <Leader>s :exec exists('syntax_on') ? 'syn off': 'syn on'<CR>

" 打开文件
if SYSTEM == 'windows'
    nmap <Leader>o :! explorer /select,  %:p<CR><CR>
else
    nmap <Leader>o :! open %:p:h<CR><CR>
endif

" 注释
map zz v<Leader>b<Leader>e%zf

" 选中区域加双引号
" function arround(dot)
"     let a:iTxt = getreg('0')
"     let a:r = a:dot . a:iTxt . a:dot
"     pu = a:r
" endfunction
" vmap " d:call arround('"')<CR>

vmap " di"<Esc>p
vmap ' di'<Esc>p
vmap ( di(<Esc>p
vmap [ di[<Esc>p
vmap { di{<Esc>p

" 搜索选中的内容
vmap / y/<c-r>0<CR>

" 马上让vim配置文件生效
if SYSTEM == 'windows'
    map <Leader>rv :source $VIM/_vimrc<CR><CR>
else
    map <Leader>rv :source $VIM/vimrc<CR><CR>
endif
